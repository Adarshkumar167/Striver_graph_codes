GRAPH SERIES STRIVER 6 (41-48)
====================== -------

41. Bellman Ford Algorithm
--------------------------

class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        // Code here
        vector<int> dist(V, 1e8);
        dist[S] = 0;
        for(int i = 0; i < V-1; i++) {
            for(auto it : edges) {
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                if(dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                    dist[v] = dist[u] + wt;
                }
            }
        }
        
        for(auto it : edges) {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if(dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                return {-1};
            }
        }
        return dist;
    }
};



42. Floyd Warshall Algorithm
----------------------------

class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n = matrix.size();
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == -1) {
	                matrix[i][j] = 1e9;
	            } 
	        }
	    }
	    
	    for(int k = 0; k < n; k++) {
	        for(int i = 0; i < n; i++) {
    	        for(int j = 0; j < n; j++) {
    	            matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j]);      
    	        }
	        }
	    }
	    
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == 1e9) {
	                matrix[i][j] = -1;
	            } 
	        }
	    }
	}
};



Negative edge cycle
...................

class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n = matrix.size();
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == -1) {
	                matrix[i][j] = 1e9;
	            } 
	        }
	    }
	    
	    for(int k = 0; k < n; k++) {
	        for(int i = 0; i < n; i++) {
    	        for(int j = 0; j < n; j++) {
    	            matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j]);      
    	        }
	        }
	    }
	    
	    // for negative cycle
	    for(int i = 0; i < n; i++) {
	        if(matrix[i][i] < 0) return -1;
	    }
	    
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == 1e9) {
	                matrix[i][j] = -1;
	            } 
	        }
	    }
	}
};