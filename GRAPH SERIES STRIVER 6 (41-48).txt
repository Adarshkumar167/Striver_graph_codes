GRAPH SERIES STRIVER 6 (41-48)
====================== -------

41. Bellman Ford Algorithm
--------------------------

class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        // Code here
        vector<int> dist(V, 1e8);
        dist[S] = 0;
        for(int i = 0; i < V-1; i++) {
            for(auto it : edges) {
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                if(dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                    dist[v] = dist[u] + wt;
                }
            }
        }
        
        for(auto it : edges) {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if(dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                return {-1};
            }
        }
        return dist;
    }
};



42. Floyd Warshall Algorithm
----------------------------

class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n = matrix.size();
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == -1) {
	                matrix[i][j] = 1e9;
	            } 
	        }
	    }
	    
	    for(int k = 0; k < n; k++) {
	        for(int i = 0; i < n; i++) {
    	        for(int j = 0; j < n; j++) {
    	            matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j]);      
    	        }
	        }
	    }
	    
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == 1e9) {
	                matrix[i][j] = -1;
	            } 
	        }
	    }
	}
};



Negative edge cycle
...................

class Solution {
  public:
	void shortest_distance(vector<vector<int>>&matrix){
	    // Code here
	    int n = matrix.size();
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == -1) {
	                matrix[i][j] = 1e9;
	            } 
	        }
	    }
	    
	    for(int k = 0; k < n; k++) {
	        for(int i = 0; i < n; i++) {
    	        for(int j = 0; j < n; j++) {
    	            matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j]);      
    	        }
	        }
	    }
	    
	    // for negative cycle
	    for(int i = 0; i < n; i++) {
	        if(matrix[i][i] < 0) return -1;
	    }
	    
	    for(int i = 0; i < n; i++) {
	        for(int j = 0; j < n; j++) {
	            if(matrix[i][j] == 1e9) {
	                matrix[i][j] = -1;
	            } 
	        }
	    }
	}
};




43. Find the City With the Smallest Number of Neighbours at a Threshold Distance
--------------------------------------------------------------------------------

class Solution {
  public:
    int findCity(int n, int m, vector<vector<int>>& edges,
                 int distanceThreshold) {
                     vector<vector<int>> dist(n,vector<int>(n,INT_MAX));
                     for(auto it : edges) {
                        dist[it[0]][it[1]] = it[2];
                        dist[it[1]][it[0]] = it[2];
                      }
                      for(int i = 0; i < n; i++) dist[i][i] = 0;
                      for(int k = 0; k < n; k++) {
                          for(int i = 0; i < n; i++) {
                              for(int j = 0; j < n; j++) {
                                  if(dist[i][k] == INT_MAX || dist[k][j] == INT_MAX) continue;
                                  dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                              }
                          }
                      }
                      
                      int cntCity = n;
                      int cityNo = -1;
                      for(int city = 0; city < n; city++) {
                          int cnt = 0;
                          for(int adjCity = 0; adjCity < n; adjCity++) {
                              if(dist[city][adjCity] <= distanceThreshold) cnt++;
                          }
                          if(cnt <= cntCity) {
                              cntCity = cnt;
                              cityNo = city;
                          }
                      }
                      return cityNo;
                 }
};



45. Prim's Algorithm - Minimum Spanning Tree
--------------------------------------------

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        vector<int> vis(V,0);
        pq.push({0,0});
        int sum = 0;
        while(!pq.empty()) {
            auto it  = pq.top();
            int node = it.second;
            int wt = it.first;
            pq.pop();
            if(vis[node] == 1) continue;
            vis[node] = 1;
            sum += wt;
            for(auto it: adj[node]) {
                int adjNode = it[0];
                int edW = it[1];
                if(!vis[adjNode]) {
                    pq.push({edW,adjNode});
                }
            }
        }
        return sum;
    }
};



46. Disjoint Set | Union by Rank | Union by Size | Path Compression
-------------------------------------------------------------------

#include <iostream>
#include <vector>
using namespace std;

class DisjointSet
{
    vector<int> rank, parent, size;

public:
    DisjointSet(int n)
    {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUPar(int node)
    {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v)
    {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v)
            return;
        if (rank[ulp_u] < rank[ulp_v])
        {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u])
        {
            parent[ulp_v] = ulp_u;
        }
        else
        {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v)
    {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v)
            return;
        if (rank[ulp_u] < rank[ulp_v])
        {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u])
        {
            parent[ulp_v] = ulp_u;
        }
        else
        {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};

int main()
{
#ifndef ONLINE_JUDGE
    freopen("intput.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif

    DisjointSet ds(7);
    ds.unionBySize(1, 2);
    ds.unionBySize(2, 3);
    ds.unionBySize(4, 5);
    ds.unionBySize(6, 7);
    ds.unionBySize(5, 6);
    // if 3 and 7 sare or not
    if (ds.findUPar(3) == ds.findUPar(7))
    {
        cout << "Same\n";
    }
    else
        cout << "Not Same\n";

    ds.unionBySize(3, 7);
    if (ds.findUPar(3) == ds.findUPar(7))
    {
        cout << "Same\n";
    }
    else
        cout << "Not Same\n";

    return 0;
}



47. Kruskal's Algorithm - Minimum Spanning Tree
-----------------------------------------------

class DisjointSet
{
    vector<int> rank, parent, size;

public:
    DisjointSet(int n)
    {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++)
        {
            parent[i] = i;
            size[i] = 1;
        }
    }
    int findUPar(int node)
    {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v)
    {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v)
            return;
        if (rank[ulp_u] < rank[ulp_v])
        {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u])
        {
            parent[ulp_v] = ulp_u;
        }
        else
        {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v)
    {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v)
            return;
        if (rank[ulp_u] < rank[ulp_v])
        {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u])
        {
            parent[ulp_v] = ulp_u;
        }
        else
        {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        vector<pair<int, pair<int, int>>> edges;
        for(int i = 0; i < V; i++) {
            for(auto it : adj[i]) {
                int adjNode = it[0];
                int wt = it[1];
                int node = i;
                
                edges.push_back({wt, {node, adjNode}});
            }
        }
        
        DisjointSet ds(V);
        sort(edges.begin(), edges.end());
        int mstWt = 0;
        for(auto it : edges) {
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            
            if(ds.findUPar(u) != ds.findUPar(v)) {
                mstWt += wt;
                ds.unionBySize(u, v);
            }
        }
        return mstWt;
    }
};



48. Number of Provinces - Disjoint Set
--------------------------------------

class DisjointSet
{
	vector<int> rank, parent, size;
  public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node]) return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v)
            return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};


class Solution {
public:
    int numProvinces(vector<vector<int>> adj, int V) {
        DisjointSet ds(V);
        for(int i = 0; i < V; i++) {
            for(int j = 0; j < V; j++) {
                if(adj[i][j] == 1) {
                    ds.unionBySize(i,j);
                }
            }
        }
        int cnt = 0;
        for(int i = 0; i < V; i++) {
            if(ds.findUPar(i) == i) cnt++;
        }
        return cnt;
    }
};



class DisjointSet
{
  public:
    vector<int> parent, size;
    DisjointSet(int n) {
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution {
public:
    int findCircleNum(vector<vector<int>>& adj) {
        int V = adj.size();
        DisjointSet ds(V);
        for(int i = 0; i < V; i++) {
            for(int j = 0; j < V; j++) {
                if(adj[i][j] == 1) {
                    ds.unionBySize(i,j);
                }
            }
        }
        int cnt = 0;
        for(int i = 0; i < V; i++) {
            if(ds.findUPar(i) == i) cnt++;
        }
        return cnt;
    }
};