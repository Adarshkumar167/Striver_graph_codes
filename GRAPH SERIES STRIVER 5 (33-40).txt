GRAPH SERIES STRIVER 5 (33-40)
====================== -------


33. Dijkstra's Algorithm - Using Set
------------------------------------

class Solution
{
  public:
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        set<pair<int, int>> st;
        vector<int> dist(V, 1e9);
        
        st.insert({0,S});
        dist[S] = 0;
        
        while(!st.empty()) {
            auto it = *(st.begin());
            int node = it.second;
            int dis = it.first;
            st.erase(it);
            
            for(auto it : adj[node]) {
                int adjNode = it[0];
                int edgW = it[1];
                if(dis + edgW < dist[adjNode]) {
                    if(dist[adjNode] != 1e9) st.erase({dist[adjNode], adjNode});
                    
                    dist[adjNode] = dis + edgW;
                    st.insert({dist[adjNode], adjNode});
                }
            }
        }
        return dist;
    }
};



35. Print Shortest Path - Dijkstra's Algorithm
----------------------------------------------

class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here
        vector<pair<int,int>> adj[n+1];
        for (auto it : edges) {
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        vector<int> dist(n+1, 1e9), parent(n+1);
        for(int i = 1; i <= n; i++) parent[i] = i;
        dist[1] = 0;
        pq.push({0,1});
        while(!pq.empty()) {
            auto it = pq.top();
            int node = it.second;
            int dis = it.first;
            pq.pop();
            
            for(auto it : adj[node]) {
                int adjNode = it.first;
                int edW = it.second;
                if(dis + edW < dist[adjNode]) {
                    dist[adjNode] = dis + edW;
                    pq.push({dis+edW, adjNode});
                    parent[adjNode] = node;
                }
            }
        }
        if(dist[n] == 1e9) return {-1};
        vector<int> path;
        int node = n;
        while(parent[node] != node) {
            path.push_back(node);
            node = parent[node];
        }
        path.push_back(1);
        reverse(path.begin(), path.end());
        
        return path;
    }
};



36. Shortest Distance in a Binary Maze
--------------------------------------

class Solution {
  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        if(source.first == destination.first && source.second == destination.second) return 0;
        queue<pair<int, pair<int, int>>> q;
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> dist(n, vector<int>(m,1e9));
        dist[source.first][source.second] = 0;
        q.push({0, {source.first, source.second}});
        int dr[] = {-1,0,1,0};
        int dc[] = {0, 1, 0, -1};
        while(!q.empty()) {
            auto it = q.front();
            q.pop();
            int dis = it.first;
            int r = it.second.first;
            int c = it.second.second;
            
            for(int i = 0 ; i < 4; i++) {
                int newr = r + dr[i];
                int newc = c + dc[i];
                if(newr >= 0 && newr < n && newc >= 0 && newc < m 
                && grid[newr][newc] == 1 && dis + 1 < dist[newr][newc]) {
                    dist[newr][newc] = 1 + dis;
                    if (newr == destination.first && newc == destination.second) return dis + 1;
                    q.push({1+dis, {newr, newc}});
                } 
            }
        }
        return -1;
    }
};



37. Path With Minimum Effort
----------------------------

class Solution {
  public:
    int MinimumEffort(vector<vector<int>>& heights) {
        
        priority_queue<pair<int,pair<int,int>>, vector<pair<int,pair<int,int>>> 
        ,greater<pair<int,pair<int,int>>>> pq;
        
        int n = heights.size();
        int m = heights[0].size();
        
        vector<vector<int>> dist(n, vector<int>(m, 1e9));
        dist[0][0] = 0;
        pq.push({0, {0, 0}});
        int dr[] = {-1, 0, 1, 0};
        int dc[] = {0, 1, 0, -1};
        while(!pq.empty()) {
            auto it = pq.top();
            pq.pop();
            int diff = it.first;
            int row = it.second.first;
            int col = it.second.second;
            
            if(row == n-1 && col == m-1) return diff;
            
            for(int i = 0; i < 4; i++) {
                int newr = row + dr[i];
                int newc = col + dc[i];
                
                if(newr >= 0 && newr < n && newc >= 0 && newc < m) {
                    int newEffort = max(abs(heights[row][col] - heights[newr][newc]), diff);
                    if(newEffort < dist[newr][newc]) {
                    dist[newr][newc] = newEffort;
                    pq.push({newEffort, {newr, newc}});
                    }
                }
            }
        }
        return 0;
    }
};



38. Cheapest Flights Within K Stops
-----------------------------------

class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        vector<pair<int,int>> adj[n];
        for(auto it : flights) {
            adj[it[0]].push_back({it[1], it[2]});
        }
        
        queue<pair<int, pair<int,int>>> q;
        
        q.push({0,{src, 0}});
        vector<int> dist(n, 1e9);
        dist[src] = 0;
        while(!q.empty()) {
            auto it = q.front();
            q.pop();
            int stops = it.first;
            int node = it.second.first;
            int cost = it.second.second;
            
            if(stops > K) continue;
            for(auto iter : adj[node]) {
                int adjNode = iter.first;
                int edW = iter.second;
                
                if(cost + edW < dist[adjNode] && stops <= K) {
                    dist[adjNode] = cost + edW;
                    q.push({stops + 1, {adjNode, cost + edW}});
                }
            }
        }
        if(dist[dst] == 1e9) return -1;
        return dist[dst];
    }
};



39. Minimum Multiplications to reach End
----------------------------------------

class Solution {
  public:
    int minimumMultiplications(vector<int>& arr, int start, int end) {
        // code here
        queue<pair<int, int>> q;
        int mod = 100000;
        vector<int> dist(100000,1e9);
        dist[start] = 0;
        q.push({0, start});
        while(!q.empty()) {
            int steps = q.front().first;
            int node = q.front().second;
            q.pop();
            for(int it : arr) {
                int pend = (node * it) % mod;
                if(steps + 1 < dist[pend]){
                    dist[pend] = steps + 1;
                    if(pend == end) return steps+1;
                    q.push({steps+1,pend});
                }
            }
        }
        return -1;
    }
};



40. Number of Ways to Arrive at Destination
-------------------------------------------

class Solution {
    #define ll long long int
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<ll,ll>> adj[n];
        for(auto it : roads) {
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }

        priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>> pq;

        vector<ll> dist(n,1e18); 
        vector<int> ways(n,0);
        dist[0] = 0;
        ways[0] = 1;
        pq.push({0,0});
        ll mod = (ll) (1e9 + 7);
        while(!pq.empty()) {
            ll dis = pq.top().first;
            ll node = pq.top().second;
            pq.pop();

            for(auto it : adj[node]) {
                ll adjNode = it.first;
                ll edW = it.second;
                if(dis + edW < dist[adjNode]) {
                    dist[adjNode] = dis + edW;
                    pq.push({dis + edW, adjNode});
                    ways[adjNode] = ways[node];
                }
                else if(dis + edW == dist[adjNode]) {
                    ways[adjNode] = (ways[adjNode] + ways[node]) % mod;
                }
            }
        }
        return ways[n-1] % mod;
    }
};
