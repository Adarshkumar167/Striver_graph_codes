GRAPH SERIES STRIVER 3 (17-24)
====================== -------

17. Bipartite Graph using [BFS] -
_________________________________

class Solution {
private:
    bool bfs(int node, int V, int color[], vector<int>adj[]) {
        queue<int> q;
        q.push(node);
        color[node] = 0;
        while(!q.empty()) {
            int n = q.front();
            q.pop();
            for(auto it : adj[n]) {
                if(color[it] == -1) {
                    color[it] = !color[n];
                    q.push(it);
                }
                else if(color[it] == color[n]) return false;
            }
        }
        return true;
    }

public:
	bool isBipartite(int V, vector<int>adj[]){
	    int color[V];
	    for(int i = 0; i < V; i++) color[i] = -1;
	    
	    for(int i = 0; i < V; i++) {
	        if(color[i] == -1) {
	            if(bfs(i,V,color,adj) == false) return false;
	        }
	    }
	    return true;
	}
};



18. Bipartite Graph using [DFS] -
_________________________________

class Solution {
private:
    bool dfs(int node, int col, int color[], vector<int>adj[]) {
        color[node] = col;
        for(auto it : adj[node]) {
            if(color[it] == -1) {
                if(dfs(it,!col,color,adj) == false) return false;
            }
            else if(color[it] == col) return false;
        }
        return true;
    }

public:
	bool isBipartite(int V, vector<int>adj[]){
	    int color[V];
	    for(int i = 0; i < V; i++) color[i] = -1;
	    
	    for(int i = 0; i < V; i++) {
	        if(color[i] == -1) {
	            if(dfs(i,0,color,adj) == false) return false;
	        }
	    }
	    return true;
	}
};



19. Detect cycle in a directed graph using DFS
______________________________________________

class Solution {
  private:
    bool dfs(int node, vector<int> adj[], int vis[], int patVis[]) {
        vis[node] = 1;
        patVis[node] = 1;
        for(auto it : adj[node]) {
            if(!vis[it]) {
                if(dfs(it,adj,vis,patVis) == true) return true;
            }
            else if(patVis[it]){
                return true;
            }
        }
        patVis[node] = 0;
        return false;
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        int vis[V] = {0}, patVis[V] = {0};
        
        for(int i = 0; i < V; i++) {
            if(!vis[i]) {
                if(dfs(i,adj,vis,patVis) ==  true) return true;
            }
        }
        return false;
    }
};



20. Find Eventual Safe States - DFS
___________________________________

class Solution {
  private:
    bool dfs(int node, vector<int> adj[], int vis[], int patVis[], int check[]) {
        vis[node] = 1;
        patVis[node] = 1;
        for(auto it : adj[node]) {
            if(!vis[it]) {
                if(dfs(it,adj,vis,patVis,check) == true) {
                    check[node] = 0;
                    return true;
                }
            }
            else if(patVis[it]){
                check[node] = 0;
                return true;
            }
        }
        check[node] = 1;
        patVis[node] = 0;
        return false;
    }
  public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        // code here
        int vis[V] = {0}, patVis[V] = {0};
        int check[V] = {0};
        for(int i = 0; i < V; i++) {
            if(!vis[i]) {
                dfs(i,adj,vis,patVis,check);
            }
        }
        
        vector<int>safe;
        for(int i = 0; i < V; i++) {
            if(check[i]) {
                safe.emplace_back(i);
            }
        }
        return safe;
    }
};



21. Topological Sort Algorithm | DFS
_____________________________________

class Solution
{
    private:
    void dfs(int node, vector<int> adj[], int vis[], stack<int>& st) {
        vis[node] = 1;
        for (auto it : adj[node]) {
            if(!vis[it]) dfs(it, adj, vis, st);
        }
        st.push(node);
    }

    public:
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    int vis[V] = {0};
	    stack<int> st;
	    
	    for(int i = 0; i < V; i++) {
	        if(!vis[i]) dfs(i, adj, vis, st);
	    }
	    
	    vector<int> ans;
	    while(!st.empty()) {
	        ans.emplace_back(st.top());
	        st.pop();
	    }
	    return ans;
	}
};



22. Kahn's Algorithm | Topological Sort Algorithm | BFS
_______________________________________________________

class Solution
{
	public:
	vector<int> topoSort(int V, vector<int> adj[]) {
	    int indegree[V] = {0};
	    for(int i = 0; i < V; i++) {
    	        for(auto it: adj[i]) {
    	            indegree[it]++;
    	    }
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < V; i++) {
	        if(indegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    vector<int> ans;
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop();
	        ans.push_back(node);
	        
	        for(auto it: adj[node]) {
	            indegree[it]--;
	            if(indegree[it] == 0) q.push(it);
	        }
	    }
	    return ans;
	}
};



23. Detect a Cycle in Directed Graph | Topological Sort | Kahn's Algorithm | BFS
________________________________________________________________________________

class Solution
{
	public:
	 bool isCyclic(int V, vector<int> adj[]) {
        int indegree[V] = {0};
	    for(int i = 0; i < V; i++) {
    	        for(auto it: adj[i]) {
    	            indegree[it]++;
    	    }
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < V; i++) {
	        if(indegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    int cnt = 0;
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop();
	        cnt++;
	        
	        for(auto it: adj[node]) {
	            indegree[it]--;
	            if(indegree[it] == 0) q.push(it);
	        }
	    }
	    
	    if(cnt == V) return false;
	    return true;
    }
};



24. Course Schedule I and II | Pre-requisite Tasks | Topological Sort
_____________________________________________________________________


class Solution {
public:
	bool isPossible(int V, vector<pair<int, int> >& prerequisites) {
	   vector<int> adj[V];
	   for(auto it : prerequisites) {
	       adj[it.first].emplace_back(it.second);
	   }
	   
	   
	   int indegree[V] = {0};
	    for(int i = 0; i < V; i++) {
    	        for(auto it: adj[i]) {
    	            indegree[it]++;
    	    	}
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < V; i++) {
	        if(indegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    vector<int> topo;
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        
	        for(auto it: adj[node]) {
	            indegree[it]--;
	            if(indegree[it] == 0) q.push(it);
	        }
	    }
	    
	    if(topo.size() == V) return true;
	    return false;
	}
};




class Solution
{
  public:
    vector<int> findOrder(int n, int m, vector<vector<int>> prerequisites) 
    {
       vector<int> adj[n];
	   for(auto it : prerequisites) {
	       adj[it[1]].emplace_back(it[0]);
	   }
	   
	   
	   int indegree[n] = {0};
	    for(int i = 0; i < n; i++) {
    	        for(auto it: adj[i]) {
    	            indegree[it]++;
    	    }
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < n; i++) {
	        if(indegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    vector<int> topo;
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        
	        for(auto it: adj[node]) {
	            indegree[it]--;
	            if(indegree[it] == 0) q.push(it);
	        }
	    }
	    
	    if(topo.size() == n) return topo;
	    return {};
	}
};