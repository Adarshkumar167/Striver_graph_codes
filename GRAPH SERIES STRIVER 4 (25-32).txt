GRAPH SERIES STRIVER 4 (25-32)
====================== -------

25. Find Eventual Safe States - BFS - Topological Sort
______________________________________________________

class Solution {
  public:
    vector<int> eventualSafeNodes(int n, vector<int> adj[]) {
       vector<int> revAdj[n];
       int indegree[n] = {0};
       for(int i = 0; i < n; i++) {
    	   for(auto it : adj[i]) {
    	       revAdj[it].emplace_back(i);
    	       indegree[i]++;
    	   }
       }
	    
	    queue<int> q;
	    for(int i = 0; i < n; i++) {
	        if(indegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    vector<int> topo;
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        
	        for(auto it: revAdj[node]) {
	            indegree[it]--;
	            if(indegree[it] == 0) q.push(it);
	        }
	    }
	    
	    sort(topo.begin(), topo.end());
	    return topo;
	}
};



26. Alien Dictionary - Topological Sort
_______________________________________

class Solution{
    private:
    vector<int> topoSort(int V, vector<int> adj[]) {
	    int indegree[V] = {0};
	    for(int i = 0; i < V; i++) {
    	        for(auto it: adj[i]) {
    	            indegree[it]++;
    	    }
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < V; i++) {
	        if(indegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    vector<int> ans;
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop();
	        ans.push_back(node);
	        
	        for(auto it: adj[node]) {
	            indegree[it]--;
	            if(indegree[it] == 0) q.push(it);
	        }
	    }
	    return ans;
	}
	
    public:
    string findOrder(string dict[], int N, int K) {
        vector<int> adj[K];
        for(int i = 0; i < N-1; i++) {
            string s1 = dict[i];
            string s2 = dict[i+1];
            int len = min(s1.size(), s2.size());
            for(int ptr = 0; ptr < len; ptr++) {
                if(s1[ptr] != s2[ptr]) {
                    adj[s1[ptr] - 'a'].push_back(s2[ptr] - 'a');
                    break;
                }
            }
        }
        
        vector<int> topo = topoSort(K, adj);
        string ans = "";
        for (auto it : topo) {
            ans = ans + char(it + 'a');
        }
        return ans;
    }
};




