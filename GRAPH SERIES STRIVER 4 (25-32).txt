GRAPH SERIES STRIVER 4 (25-32)
====================== -------

25. Find Eventual Safe States - BFS - Topological Sort
______________________________________________________

class Solution {
  public:
    vector<int> eventualSafeNodes(int n, vector<int> adj[]) {
       vector<int> revAdj[n];
       int indegree[n] = {0};
       for(int i = 0; i < n; i++) {
    	   for(auto it : adj[i]) {
    	       revAdj[it].emplace_back(i);
    	       indegree[i]++;
    	   }
       }
	    
	    queue<int> q;
	    for(int i = 0; i < n; i++) {
	        if(indegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    vector<int> topo;
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop();
	        topo.push_back(node);
	        
	        for(auto it: revAdj[node]) {
	            indegree[it]--;
	            if(indegree[it] == 0) q.push(it);
	        }
	    }
	    
	    sort(topo.begin(), topo.end());
	    return topo;
	}
};



26. Alien Dictionary - Topological Sort
_______________________________________

class Solution{
    private:
    vector<int> topoSort(int V, vector<int> adj[]) {
	    int indegree[V] = {0};
	    for(int i = 0; i < V; i++) {
    	        for(auto it: adj[i]) {
    	            indegree[it]++;
    	    }
	    }
	    
	    queue<int> q;
	    for(int i = 0; i < V; i++) {
	        if(indegree[i] == 0) {
	            q.push(i);
	        }
	    }
	    
	    vector<int> ans;
	    while(!q.empty()) {
	        int node = q.front();
	        q.pop();
	        ans.push_back(node);
	        
	        for(auto it: adj[node]) {
	            indegree[it]--;
	            if(indegree[it] == 0) q.push(it);
	        }
	    }
	    return ans;
	}
	
    public:
    string findOrder(string dict[], int N, int K) {
        vector<int> adj[K];
        for(int i = 0; i < N-1; i++) {
            string s1 = dict[i];
            string s2 = dict[i+1];
            int len = min(s1.size(), s2.size());
            for(int ptr = 0; ptr < len; ptr++) {
                if(s1[ptr] != s2[ptr]) {
                    adj[s1[ptr] - 'a'].push_back(s2[ptr] - 'a');
                    break;
                }
            }
        }
        
        vector<int> topo = topoSort(K, adj);
        string ans = "";
        for (auto it : topo) {
            ans = ans + char(it + 'a');
        }
        return ans;
    }
};



27. Shortest Path in Directed Acyclic Graph - Topological Sort
______________________________________________________________

class Solution {
  private:
    void topoSort(int node, vector<pair<int,int>> adj[], int vis[], stack<int>& st) {
        vis[node] = 1;
        for(auto it : adj[node]) {
            int v = it.first;
            if(!vis[v]) topoSort(v, adj, vis, st);
        }
        st.push(node);
    }
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<pair<int,int>> adj[N];
        for(auto it : edges) {
            adj[it[0]].emplace_back(it[1],it[2]);
        }
        
        int vis[N] = {0};
        stack<int> st;
        for(int i = 0; i < N; i++) {
            if(!vis[i]) {
                topoSort(i, adj, vis, st);
            }
        }
        
        vector<int> dist(N, 1e9);
        dist[0] = 0;
        while(!st.empty()) {
            int node = st.top();
            st.pop();
            
            for(auto it : adj[node]) {
                int v = it.first;
                int wt = it.second;
                
                if(dist[node] + wt < dist[v]) {
                    dist[v] = dist[node] + wt;
                }
            }
        }
        
        for(int i = 0; i < N; i++) {
            if(dist[i] == 1e9) dist[i] = -1;
        }
        
        return dist;
    }
};


28. Shortest Path in Undirected Graph with Unit Weights
_______________________________________________________

class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int> adj[N];
        for(auto it : edges) {
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        
        vector<int> dist(N,1e9);
        dist[src] = 0;
        queue<int> q;
        q.push(src);
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            for(auto it : adj[node]) {
                if(dist[node] + 1 < dist[it]) {
                    dist[it] = 1 + dist[node];
                    q.push(it);
                }
            }
        }
        vector<int> ans(N, -1);
        for(int i = 0; i < N; i++) {
            if(dist[i] != 1e9) ans[i] = dist[i];
        }
        return ans;
    }
};



29. Word Ladder I
_________________

class Solution {
public:
    int wordLadderLength(string startWord, string targetWord, vector<string>& wordList) {
        // Code here
        queue<pair<string,int>> q;
        q.push({startWord, 1});
        unordered_set<string> st(wordList.begin(), wordList.end());
        st.erase(startWord);
        while(!q.empty()) {
            string word = q.front().first;
            int steps = q.front().second;
            q.pop();
            if(word == targetWord) return steps;
            for(int i = 0; i < word.size(); i++) {
                char original = word[i];
                for(char ch = 'a'; ch <= 'z'; ch++) {
                    word[i] = ch;
                    if(st.find(word) != st.end()) {
                        st.erase(word);
                        q.push({word, steps + 1});
                    }
                }
                word[i] = original;
            }
        }
        return 0;
    }
};



30. Word Ladder II
__________________

class Solution {
public:
    vector<vector<string>> findSequences(string beginWord, string endWord, vector<string>& wordList) {
        // code here
        unordered_set<string> st(wordList.begin(), wordList.end());
        queue<vector<string>> q;
        q.push({beginWord});
        vector<string> usedOnLevel;
        usedOnLevel.push_back(beginWord);
        int level = 0;
        vector<vector<string>> ans;
        while(!q.empty()) {
            vector<string> vec = q.front();
            q.pop();
            
            if(vec.size() > level) {
                level++;
                for(auto it : usedOnLevel) {
                    st.erase(it);
                }
                usedOnLevel.clear();
            }
            
            string word = vec.back();
            if(word == endWord) {
                if(ans.size() == 0) {
                    ans.push_back(vec);
                }
                else if(ans[0].size() == vec.size()) {
                    ans.push_back(vec);
                }
            }
            for(int i = 0; i < word.size(); i++) {
                char original = word[i];
                for(char c = 'a'; c <= 'z'; c++) {
                    word[i] = c;
                    if(st.count(word) > 0) {
                        vec.push_back(word);
                        q.push(vec);
                        usedOnLevel.push_back(word);
                        vec.pop_back();
                    }
                }
                word[i] = original;
            }
        }
        return ans;
    }
};

